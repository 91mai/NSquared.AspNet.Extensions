// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NSquared.MvcExtensions.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("使用ActionFilter提供JsonSchema", Description="為了方便在開發時期，可以提供回傳資料的JsonSchema\n提供給前端開發人員 （F2E、App）產生其他語言的Class\n透過Asp.Net Mvc Actio" +
        "n Filter的方式，自動讀取回傳對應的Type產生JsonSchema", SourceFile="使用ActionFilter提供JsonSchema.feature", SourceLine=1)]
    public partial class 使用ActionFilter提供JsonSchemaFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "使用ActionFilter提供JsonSchema.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("zh-TW"), "使用ActionFilter提供JsonSchema", "為了方便在開發時期，可以提供回傳資料的JsonSchema\n提供給前端開發人員 （F2E、App）產生其他語言的Class\n透過Asp.Net Mvc Actio" +
                    "n Filter的方式，自動讀取回傳對應的Type產生JsonSchema", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("HttpRequest包含Header，並且有指定回傳物件的Type，成功回傳JsonSchema", SourceLine=6)]
        public virtual void HttpRequest包含Header並且有指定回傳物件的Type成功回傳JsonSchema()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HttpRequest包含Header，並且有指定回傳物件的Type，成功回傳JsonSchema", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("HttpRequest的Header包含 \"NSquared-Request-JsonSchema\", 值為 \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line 9
 testRunner.And("指定物件回傳的Type為 \"NSquared.MvcExtensions.Test.Models.TestData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "並且");
#line 10
 testRunner.When("執行Action時", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line 11
 testRunner.Then("回傳內容為\"{\"title\":\"NSquared.MvcExtensions.Test.Models.TestData\",\"type\":\"object\",\"pro" +
                    "perties\":{\"Id\":{\"required\":true,\"type\":\"integer\"},\"Name\":{\"required\":true,\"type\"" +
                    ":[\"string\",\"null\"]},\"Birthday\":{\"required\":true,\"type\":\"string\"}}}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("HttpRequest包含Header，但值為False，沒有覆寫回傳內容", SourceLine=12)]
        public virtual void HttpRequest包含Header但值為False沒有覆寫回傳內容()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HttpRequest包含Header，但值為False，沒有覆寫回傳內容", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("HttpRequest的Header包含 \"NSquared-Request-JsonSchema\", 值為 \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line 15
 testRunner.And("指定物件回傳的Type為 \"NSquared.MvcExtensions.Test.Models.TestData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "並且");
#line 16
 testRunner.When("執行Action時", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line 17
 testRunner.Then("沒有回傳內容", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("HttpRequest沒有包含Header，沒有覆寫回傳內容", SourceLine=18)]
        public virtual void HttpRequest沒有包含Header沒有覆寫回傳內容()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HttpRequest沒有包含Header，沒有覆寫回傳內容", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.And("指定物件回傳的Type為 \"NSquared.MvcExtensions.Test.Models.TestData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "並且");
#line 21
 testRunner.When("執行Action時", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line 22
 testRunner.Then("沒有回傳內容", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("HttpRequest包含Header，預設路徑沒有資料，收到錯誤訊息", SourceLine=23)]
        public virtual void HttpRequest包含Header預設路徑沒有資料收到錯誤訊息()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("HttpRequest包含Header，預設路徑沒有資料，收到錯誤訊息", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("HttpRequest的Header包含 \"NSquared-Request-JsonSchema\", 值為 \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line 26
 testRunner.But("沒有指定回傳物件的Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "但是");
#line 27
 testRunner.When("執行Action時", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line 28
 testRunner.Then("拋出錯誤訊息", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
